(page "Anaphoric operations"
(text "Anaphoric operations provide a mechanism to refer back to themselves.
This can be useful when an expression needs to be used later, as in <code>aif</code>, <code>awhen</code>, or <code>aand</code>.  Anaphoric functions allow a function to refer back to itself recursively, without creating a named function.

<p>See <a href='http://www.bookshelf.jp/texi/onlisp/onlisp_15.html'>On Lisp Chapter 14</a> for a detailed explanation of anaphoric operations.")
(newtable "Anaphoric operations"
(mac aif "expr body [expr body] ..." "Anaphoric <code>if</code>: each <code>expr</code> is evaluated until one is true, and then the corresponding <code>body</code> is executed.  Within the body, the anaphoric variable <code>it</code> refers back to the value of <code>expr</code>." (tests (aif (> 1 2) (+ it 1) 42 (+ it 2))(aif nil (+ it 1))))
(mac awhen "expr [body ...]" "Anaphoric <code>when</code>: if the <code>expr</code> is true, the <code>body</code> is executed.  Within the body, the variable <code>it</code> refers back to the value of <code>expr</code>." (tests (awhen (* 2 3) (+ it 1))))
(mac aand "[arg ...]" "Anaphoric <code>and</code>.  Returns the last argument if all arguments are true, otherwise returns <code>nil</code>.  Inside each argument the anaphoric variable <code>it</code> refers to the value of the previous argument.  Like <code>and</code>, lazy evaluation is used, so evaluation stops after encountering a false argument."
(tests (aand 1 (+ it 2) (* it 10))))
(mac afn "parms [body ...]" "Creates an anaphoric function, which can be called recursively with the name <code>self</code>.  This allows a recursive function to be created without assigning it a name." (tests ((afn (x) (if (is x 0) 1 (* 2 (self (- x 1))))) 5)))
(mac rfn "name parms [body ...]" "Creates a function with the given <code>name</code>.  The name is only inside the scope of the <code>rfn</code> macro.  This allows recursive functions to be created without polluting the wider scope." (tests ((rfn pow2 (x) (if (is x 0) 1 (* 2 (pow2 (- x 1))))) 5)))
(def trav "obj [function ...]" "Recursive traversal.  Applies each <code>function</code> in sequence to <code>obj</code>, if <code>obj</code> is not <code>nil</code>.  The function can recursively call itself with a new <code>obj</code> with <code>(self obj)</code>." (tests  (trav '(1 2 3 4) [prn _] [self (cdr _)])))
)
)
