(page "Web server"
(import "docs/srv0.html")
(newtable "Web server"

(mac defop "name req-param [body ...]" "Defines a HTML response handler for the URL path <code>name</code>.  The handler body takes one parameter, the <code>req</code> object and should output to <code>stdout</code>." (tests (defop foo req (prn "Hello"))))

(mac defop-raw "name (outstream-param req-param) [body ...]" "Defines a HTML response handler for the URL path <code>name</code>.  The handler body takes two parameters: the output stream and the <code>req</code> object.  The handler can output additional HTTP headers." (tests "(defop-raw fooraw (str req)
  (w/stdout str (prn \"X-Arc: foo\") (prn) (prn \"Hello\")))"))
 

(mac defopr "name req-param [body ...]" "Defines a redirect response handler for the URL path <code>name</code>.  The handler body takes one parameter, the <code>req</code> object and should output to <code>stdout</code>." (tests (defopr bar req (prn "foo"))))

(mac defopr-raw "name (outstream-param req-param) [body ...]" "Defines a redirect response handler for the URL path <code>name</code>.  The handler body takes two parameters: the output stream and the <code>req</code> object.  The handler can output additional HTTP headers." (tests
"(defopr-raw baz (str req)
  (disp \"Set-Cookie: this=that\\n\" str) \"foo\")"))

(mac aform "f [body ...]" "Generates a form from <code>body</code>.  <code>f</code> is a continuation function to execute when the form is submitted."
(tests (defop af rq (aform (fn (req) (prn req)) (submit)))))

(mac fnform "f bodyfn [redir]" "Generates a form from a body function. <code>f</code> is a continuation function to execute when the form is submitted."
(tests (defop af rq (fnform (fn (req) [prn req]) (submit)))))

(mac timed-aform "lasts f [body ...]" "Generates a form.  The <code>fnid</code> has a lifetime of <code>lasts</code> seconds."
(tests (defop taf rq (timed-aform 10 (fn (req) (prn req)) (submit)))))

(mac timed-arform "lasts f [body ...]" "Generates a form.  Like timed-aform except with a redirect.  New in arc3."
(tests (defop taf rq (timed-arform 10 (fn (req) (prn req)) (submit)))))



(mac arform "f [body ...]" "Generates a form that goes to a redirect.  The callback function <code>f</code> must return the redirect target."
(tests (defop arf rq (arform (fn (req) "foo") (prn "Click:") (submit)))))

(mac aformh "f [body ...]" "Generates a form with additional headers."
(tests "(defop afh rq (aformh
  (fn (req) (prn \"Set-Cookie: a=b\\n\") (prn req))
  (prn \"Click:\") (submit)))"))

(mac arformh "f [body ...]" "Generates a form that goes to a redirect with additional headers."
(tests "(defop arfh rq (arform (fn (req) (prn \"Set-Cookie: a=b\") \"foo\")
  (prn \"Click:\") (submit)))"))


(def url-for "fnid" "Generates a URL linking to the given <code>fnid</code>, using <code>fnurl*</code>." (tests (url-for '1234)))
(mac afnid "f" "Generate anaphoric <code>fnid</code>. The continuation function <code>f</code> can access the <code>fnid</code> as the variable <code>it</code>. <code>f</code> must print a blank line before the HTML content."
(tests (afnid (fn (req) (prn "\nFnid is " it)))))

(def flink "f" "Generates a URL that will run the continuation function <code>f</code>.  It creates a <code>fnid</code> to do this."
(tests (flink (fn (req) (prn "hi")))))

(def rflink "f" "Generates a URL that will run the redirect continuation function <code>f</code>.  It creates a <code>fnid</code> to do this."
(tests (rflink (fn (req) (prn "Header: x") "foo"))))

(mac w/link "expr [body ...]" "Wraps <code>body</code> in a link to continuation expression <code>expr</code>."
(tests (defop wl req (w/link (prn "You clicked.") (prn "Click here"))) ))

(mac w/link-if "test expr [body ...]" "If <code>test</code> is true, wraps <code>body</code> in a link to continuation expression <code>expr</code>.  Otherwise, just displays <code>body</code> without the link."
(tests "(defop wli req (w/link-if t (prn \"You clicked.\")
  (prn \"Click here\")))" ))

(mac w/rlink "expr [body ...]" "Wraps <code>body</code> in a link to redirect continuation expression <code>expr</code>."
(tests (defop wrl req (w/rlink "foo" (prn "Click here")))))

(mac onlink "text [body ...]" "Creates a link with contents <code>text</code> that will execute continuation expression <code>body</code>.  Note that <code>onlink</code> reverses the roles of the arguments compared to <code>w/link</code>."
(tests (defop ol req (onlink "Click here" (prn "You clicked.")))))

(mac onrlink "text [body ...]" "Creates a rlink with contents <code>text</code> that will execute continuation expression <code>body</code>.  New in arc3."
(tests (defop ol req (onrlink "Click here" (prn "You clicked.")))))

(mac linkf "text parms [body ...]" "Creates a link with contents <code>text</code> to run the continuation function specified by <code>params</code> and <code>body</code>.  Params should be a single argument such as <code>(req)</code>."
(tests (defop lf rq (linkf "Click here" (req) (prn "Your request: " req)))))

(mac rlinkf "text parms [body ...]" "Creates a link with contents <code>text</code> to run the redirection continuation function specified by <code>params</code> and <code>body</code>.  Params should be a single argument such as <code>(req)</code>."
(tests (defop rlf rq (rlinkf "Click here" (req) "foo"))))

(def arg "req key" "Looks up the URL query value for <code>key</code> in <code>req</code>."
(tests "(let req (obj args '((foo 1)))
  (arg req 'foo))"))

(def serve "[port]" "Start server, by default on port 8080."
(faketest "(serve 8080)" ""))

(def srvlog "type [args ...]" "Records timestamp and <code>args</code> in the server log <code>type</code>." (tests (srvlog 'blog "Stuff to log")))
(def defbg "id sec [body ...]" "Creates a background thread with the given id tha will run the body every sec seconds.  Any existing thread with the same id is terminated.  New in arc3.")
)

(newtable "Web server configuration variables"
(var arcdir* "" "Parent directory for server data." (tests arcdir*))
(var logdir* "" "Directory to hold server logs." (tests logdir*))
(var staticdir* "" "Directory to hold static files.  New in arc3." (tests staticdir*))
(var static-max-age* "" "Maximum age for static files; used in Cache-Control header.  New in arc3." (tests static-max-age*))
(var max-age* "" "Table of maximum age by operation; used in Cache-Control header.  New in arc3." (tests max-age*))
(var quitsrv* "" "Flag to shut down server if set to true." (tests quitsrv*))
(var breaksrv* "" "Flag to enable stopping server with control-C." (tests breaksrv*))
(var srv-noisy* "" "Flag to enable debug logging in the server." (tests srv-noisy*))
(var threadlife* "" "Maximum time (in seconds) for a thread to handle a request before being killed." (tests threadlife*))
(var throttle-ips* "" "Table of IP addresses that should be throttled; they will be delayed by up to <code>throttle-time*</code> seconds." (tests throttle-ips*))
(var throttle-time* "" "Maximum number of seconds to delay requests from IP addresses in <code>throttle-ips*</code>" (tests throttle-time*))
(var ignore-ips* "" "IP addresses to ignore.  New in arc3." (tests ignore-ips*))
(var spurned* "" "Count of ignored IP addresses by address.  New in arc3." (tests spurned*))
(var req-limit* "" "Maximum number of requests in req-window* seconds before triggering DoS attack detection.  New in arc3." (tests req-limit*))
(var req-window* "" "Time window in seconds for triggering throttling.  New in arc3." (tests req-window*))
(var dos-window* "" "Time window in seconds for triggering DoS attack detection.  New in arc3." (tests dos-window*))
(var opcounts* "" "Table counting number of times each operation executed. New in arc3." (tests opcounts*))
)

(newtable "Web server internals"
(import "docs/srv1.html")



(def serve1 "[port]" "Start server to handle a single request." (faketest "(serve1 8080)" " "))
(def ensure-srvdirs "" "Create directories for <code>arcdir*</code> and <code>logdir*</code> if necessary." (faketest "(ensure-srvdirs)" " "))


(def handle-request "s [breaksrv]" "Handles a request.  It accepts a connection on socket <code>s</code> and starts a thread running <code>handle-request-thread</code>.  If breaksrv is true, ^C will break out of the server.")

(def handle-request-thread "i o ip" "The core code to handle a request.  The arguments are the input port, the output port, and the user's IP address.  It reads the header, calls <code>parseheader</code>, <code>srvlog</code>, <code>respond</code> (get) or <code>handle-post</code> (post) or <code>respond-err</code>.  Then executes <code>harvest-fnids</code> when done.")

(def handle-post "i o op args n cookies ip" "Handles a POST action.  The arguments are the input port, the output port, the path, the arguments, the content-length, the cookies, and the user's IP address.  Collects POST data and calls <code>respond</code>.")




(def respond "str op args cooks ip" "Responds to a GET or POST request.  <code>str</code> is the output stream, rest from <code>parseheader</code>. If <code>op</code> is in <code>redirector*</code>, it does a redirect.  If <code>op</code> is in <code>srvops*</code> otherwise, it prints <code>header*</code> and executes the associated function.  Otherwise, a <code>static-filetype</code> is copied with <code>type-header*</code>.  Otherwise, <code>respond-err</code>.")

(def save-optime "name elapsed" "Updates <code>optimes*</code> with the time taken to run <code>name</code>." (tests (save-optime "foo" 10)))

(def static-filetype "sym" "Returns a filetype symbol for a static file." (tests (static-filetype "foo.gif")))

(def respond-err "str msg [args ...]" "Generates an error response page containing <code>msg</code> and <code>args</code>." (faketest "(respond-err (stdout) \"Bad news\")" ""))


(def parseurl "s" "Parses an action and URL. Returns a list of <code>type</code> (<code>get</code> or <code>post</code>), <code>op</code> (the path), and an association list of <code>args</code>." (tests (parseurl "GET /x?foo=1&bar")))

(def parseheader "lines" "Parses a request header.  Returns a list of <code>type</code>, <code>op</code>, <code>args</code>, <code>content-length</code> (for <code>post</code>), and <code>cookies</code>."
(tests "(parseheader '(\"POST /foo?a=b\" \"Cookie: bar=baz\"
     \"Content-Length: 42\"))"))

(def parsecookies "s" "Parse a HTTP cookies header.  Returns an association list of name/value pairs." (tests (parsecookies"Cookie: name1=val1;name2=val2")))

(def parseargs "s" "Parses args part of URL. Returns an association list of key/value pairs." (tests (parseargs "x=a+b&y=%c3%e9&z")))

(def reassemble-args "req" "Creates the URL query string from the <code>args</code> in <code>req</code>.  The arguments are not URL-encoded, so they must not contain any special characters." (tests "(let req (obj args '((\"x\" \"foo\") (\"y\" \"bar\")))
  (reassemble-args req))"))


(def new-fnid "" "Generates a random unused fnid symbol.</code>." (tests (new-fnid)))

(def fnid "f" "Generates a <code>fnid</code> with continuation function <code>f</code>." (tests (fnid (fn (req) (prn "hi")))))

(def timed-fnid "lasts f" "Generates a <code>fnid</code> that will expire after <code>lasts</code> seconds." (tests (timed-fnid 100 (fn (req) (prn "hi")))))

(def harvest-fnids "[max]" "If <code>fns*</code> has more than <code>max</code> fnids, purges any expired <code>timed-fnids*</code> and purges the oldest <code>fnids*</code> (10% of <code>max</code> are purged)." (tests (harvest-fnids 1000)))

(def fnid-field "id" "Generates a hidden field assigning <code>id</code> to <code>fnid</code>." (htmltests (fnid-field 'abc123)))

(def unique-id "[length]" "Generates a unique random alphanumeric id.  The minimum length is 5, and the default length is 8.  The table <code>unique-ids*</code> holds all generated ids to ensure uniqueness." (tests (unique-id)))

(def memodate "" "Returns current date.  Uses memoization for efficiency; dates are cached for 60 seconds.  Only works on some platforms.")


(var fns* "" "Table mapping from <code>fnid</code> to continuation function.")
(var fnids* "" "List of fnids without an explicit lifetime.")
(var timed-fnids* "" "List of entries for fnids with an explicit lifetime.  Each entry is a list  of <code>fnid, time, lasts</code> for <code>fnids</code> with an expiration time.")
(var fnurl* "" "URL path for a fnid continuation." (tests fnurl*))
(var rfnurl* "" "URL path for a fnid continuation redirect." (tests rfnurl*))
(var rfnurl2* "" "URL path for a fnid continuation raw redirect." (tests rfnurl2*))
(var jfnurl* "" "URL path for an asynchronous fnid continuation." (tests jfnurl*))


(var unique-ids* "" "Table of ids generated by <code>unique-id</code>.")

(var unknown-msg* "" "Message for an unknown operator." (tests unknown-msg*))

(var rdheader* "" "Redirect header" (tests rdheader*))

(var srvops* "" "Holds operations defined by the <code>defop</code> macros. Used by <code>respond</code> to map the URL path to the handler.")
(var redirector* "" "Table with entries for names that are 'redirectors'.  These will return <code>rdheader*</code> and the new location." (tests (keys redirector*)))
(var optimes* "" "Table of the last 1000 elapsed times (in ms) for operations.")
(var header* "" "HTTP header" (tests header*))

(var type-header* "" "Table of return HTML headers for static files.  Renamed from srv-header* in arc3." (tests (keys type-header*)))
 
(var requests* "" "Counter of the total number of requests handled." (tests requests*))
(var requests/ip* "" "Table mapping from IP address to the total number of requests associated with that IP address." (tests requests/ip*))
(var dead-msg* "" "Message when a link has an expired <code>fnid</code>." (tests dead-msg*))
(var bgthreads* "" "Table of background threads." (tests bgthreads*))
(var pending-threads* "" "List of pending background threads." (tests pending-threads*))
(var req-times* "" "Table of requests by IP addresses for DoS attack detection.  New in arc3." (tests req-times*))
(def handle-request "s [life]" "Implements handle-request without breaksrv.  New in arc3.")
(def log-request "type op args cooks ip t0 t1" "Logs a request.  New in arc3.")
(def gen-type-header "ctype" "Generates response header for the type. New in arc3." (tests (gen-type-header "gif")))
(mac timed-aform2 "genurl lasts f [body ...]" "timed-aform with ignored genurl argument.")
(def logfile-name "type" "Creates logfile name for the given type. New in arc3." (tests (logfile-name "gif")))
(def sortable "table comparison-fn" "Sorts a table.  Default comparison is >.  New in arc3." (tests (sortable (obj 'a 5 'b 2 'c 4))))
(def new-bgthread "id f sec" "Creates a background thread with the given id tha will run f every sec seconds.  Any existing thread with the same id is terminated.  New in arc3.")
)
)
