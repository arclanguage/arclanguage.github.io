(page "Predicates"
(newtable "Predicates"
  (text "Arc includes multiple predicates.  The dead and ssyntax predicates are
  listed elsewhere.")
  (op < "arg arg [...]" "Less than comparison.  Applies to numbers, strings, symbols, or
  chars.  If multiple arguments are given, the sequence must be monotonically
  increasing."
    (tests (< 1 2)
           (< 1 2 3)
	   (< 1 3 2)
           (< "a" "b")
           (< 'a 'b)
	   (< #\a #\b)
    )) 
  (op > "arg arg [...]" "Greater than comparison.  Applies to numbers, strings, symbols, or
  chars.  If multiple arguments are given, the sequence must be monotonically
  decreasing." 
    (tests (> 1 2)
	   (> 3 1 2)
           (> "a" "b")
           "(> 'a 'b)"
	   (> #\a #\b)
    )) 
  (op bound "symbol" "Tests is a symbol is bound."
    (tests (bound 'foo)
      "(do
       (assign y 1)
       (bound 'y))")) 
  (op exact "value" "Tests if the value is an exact integer."
    (tests (exact 3) (exact 3.14))) 
  (op is "val [val ...] " "Tests equality with eqv?" 
    (tests (is 1 2) 
           (is "a" "a")
	   "(is '(1) '(1))"
           (is 1 1 1 1)
	   "(is nil '())"
	   ))
(def <= "[arg ...]" "The less-than-or-equal predicate.  It can take an arbitrary number of arguments.  There is no short-circuiting; all arguments are evaluated.  Arguments must be comparable.  Arguments can be numbers, characters or strings, but all arguments must be of the same type." (tests (<= 2 2.) (<= #\a #\c #\e)(<= "foo" "bar")))
(def >= "[arg ...]" "The greater-than-or-equal predicate.  It can take an arbitrary number of arguments.  There is no short-circuiting; all arguments are evaluated.  Arguments must be comparable.  Arguments can be numbers, characters or strings, but all arguments must be of the same type." (tests (>= 2 3) (>= #\a #\c #\e)(>= "baz" "bar")))
(def predicate dotted "x" "Returns true if x is a dotted list." (tests))
(def predicate isa "x y" "Tests if x has type y." (tests))
(def orf "function ..." "Creates a function on one variable that tests if any of the original functions are true when applied to the variable." (tests))
(def andf "function ..." "Creates a function on one variable that tests if all of the original functions are true when applied to the variable." (tests))
(def atend "i s" "Tests if index i is at the end or beyond in sequence or string s." (tests))
(def testify "test" "Creates a predicate from test.  If test is a function, it is used as the predicate.  Otherwise, a function is created to test equality with test using 'is'." (tests))
(def predicate acons "x" "Tests if x is of type 'cons, i.e. if x is a non-nil list." (tests))
(def predicate atom "x" "Tests if x is an atom, that is anything other than type 'cons.  Note that atom and acons are opposites." (tests))
(def predicate alist "x" "Tests if x is a list, i.e. nil or of type 'cons.  The alist and acons predicates are the same except for nil, which is a list but an atom, not acons." (tests))
(def predicate some "test seq" "Tests if any element of seq satisfies test.  The sequence is either a list or a string.  The test is a predicate or value, which is wrapped in testify." (tests))
(def predicate all "test seq" "Tests if all elements of seq satisfies test.  The sequence is either a list or a string.  The test is a predicate or value, which is wrapped in testify." (tests))
(def predicate isnt "x y" "Tests inequality; opposite of is." (tests))
(def predicate iso "x y" "Compares x and y.  If they are lists, they are compared element-by-element." (tests))
(def predicate empty "seq" "Tests if seq is empty.  Works on lists, strings, and tables." (tests))
)
)
