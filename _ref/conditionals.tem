(page "Conditionals"
(import "docs/conditionals0.html")
(newtable "Conditionals"
  (op if "[test expr] ... [else-expr]" "Arc is the basic conditional operation.
  It takes a sequence of tests and expressions.  The expression corresponding
  to the first true test is returned.  Other expressions are not evaluated."
    (tests "(if nil \"Nil is true\"
    0   \"0 is true\"
    \"What is true?\")")) 
(mac iflet "var expr then-expr [test1 expr1] ... [else-expr]"
"Evaluates <code>expr</code>.  If true, <code>expr</code> is assigned to <code>var</code> and <code>then-expr</code> is evaluated and returned.  Otherwise, the remaining arguments are processed as normal <code>if</code> clauses."
(tests
"(iflet x 42 (+ x 1))"
"(iflet x nil (+ x 1))"
"(iflet x nil (+ x 1)
        (< 1 2) 55)"
))
(mac when "test [body ...]" "Executes body if test is true.  This is similar to <code>if</code>, except it allows multiple body statements but only has a single test clause. " (tests (when 1 (pr "a") (pr "b"))))
(mac whenlet "var expr [body ...]" "Evaluates <code>expr</code>.  If true, the value is assigned to <code>var</code> and <code>body</code> is executed."
(tests (whenlet x nil (prn "hi") (+ x 1))  (whenlet x 1 (prn "hi") (+ x 1))))
(mac unless "test [body ...]" "Executes body if test is false.  This is the opposite of 'when'." (tests (unless 1 (pr "a") (pr "b"))))
(mac case "arg [test1 expr1] ... [else-expr]"
"<code>arg</code> is evaluated.  It is then compared to the test values in sequence.  If it matches one, the corresponding expr is evaluated and returned.  If there is no match and no <code>else-expr</code>, <code>nil</code> is returned." (tests
 "(case 'b
   a 1
   b 2
     3)"
 "(case 42
   10 \"foo\"
   42 \"bar\")"
))
(mac caselet "var arg [test1 expr1] ... [else-expr]"
"<code>arg</code> is evaluated and assigned to <code>var</code>.  It is then compared to the test values in sequence.  If it matches one, the corresponding expr is evaluated and returned.  If there is no match and no <code>else-expr</code>, <code>nil</code> is returned." (tests
 "(caselet x 'b
   a 1
   b 2
     3)"
 "(caselet x 42
   10 (+ x 3)
   42 (+ x 5))"
))
(mac check "expr test [alt]" "Evaluates <code>expr</code> and applies predicate <code>test</code>.  If true, returns the evaluated value.  Otherwise returns <code>alt</code> or nil. <code>alt</code> can be a function to try again, even calling <code>check</code> recursively." (tests (check (+ 10 10) odd "foo") (check (+ 10 10) even "bar")))
)
)
