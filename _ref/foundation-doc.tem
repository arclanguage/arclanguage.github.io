(page "The Foundation"
(import "docs/hdr.txt")

(newtable "Data Types" 
  (text "
  Arc inherits a surprisingly complex system of data types
  from <a
  href='http://download.plt-scheme.org/doc/mzscheme/mzscheme-Z-H-3.html#node_chap_3'>MzScheme</a>.
  <p/>
  Arc defines Boolean values somewhat differently from Scheme, using nil
  for falsity and t for truth.  Note that anything except nil and the empty
  list will evaluate as true, including 0 and an empty table.")
  
  (op-nolink numbers "" "Arc includes integers (fixed size and arbitrarily large),
  floats, fractions, and complex numbers.  It also has positive and negative infinities
  and \"Not a Number\".  Arc supports escapes for hex, decimal, octal, or
  binary numbers: #x, #d, #o, and #b. Numbers are of type 'int or 'num."
    (tests 42 5. 2-3.i +inf.0 "(+ #x10 #d10 #o10 #b10)"  1/2+3/4i "1e3"
    "1/2e3" (type 5.0) (type 1+2i)))
  (op-nolink characters "" "Arc supports Unicode characters, and a variety of
  escapes."
    (tests "(prn #\\a #\\102 #\\newline #\\null #\\u5a #\\u4e9c #\\U12031 #\\日)" (type #\a)))
  (op-nolink strings "" "Arc supports Unicode strings, and a variety of escapes.  The
  escape sequences are not the same as the character escape sequences."
    (tests "(prn \"a \\102 \\n \\x00 \\x5a \\U4e9c 日\")" (type "a")))
  (op-nolink symbols "" "By quoting a symbol, it will not be evaluated."
    (tests 'a (quote b) (type 'c)))
  (op-nolink lists "" "Lists are built up of cons cells.  They are terminated with nil,
  in contrast to Scheme, where they are terminated with '()."
    (tests '(1 2 3) (type '(1))))
  (op-nolink procedures "" "Procedures are created by fn or def."
    (tests (fn (x) (+ x 1)) (def foo (x) (+ x 1)) (type (fn (x) (+ x 1)))))
  (op-nolink macros "" "Macros are created by mac."
    (tests (mac bar (x) `(+ ,x 1)) (type (mac baz (x) `(+ ,x 1)))))
  (op-nolink tagged "" "Arc supports arbitrary tagged types."
    (tests (annotate 'mytype 'x) (type (annotate 'mytype 'x))))
  (op-nolink table "" "Arc supports hash tables.  Tables can be used as
  functions; they look up the key."
    (tests (table) "(let x (table)
    (= (x 'key) 'value)
    (prn (x 'key) (x 'foo 'default)))"
    (type (table))))
  (op-nolink input "" "Input ports can be from files, sockets, or strings."
    (tests (type (stdin))))
  (op-nolink output "" "Output ports can be from files, sockets, or strings."
    (tests (type (outfile "/tmp/junk"))))
  (op-nolink exception "" "A thread can throw an exception if an error occurs, or
  generate an exception with err."
    (tests "(on-err (fn (ex) (prn ex) (prn (details ex)) (type ex))
    (fn () (car 1)))"))
  (op-nolink socket "" "A TCP socket is created with open-socket.  Arc's socket
  support is limited to incoming TCP connections."
    (tests (type (open-socket 8080))))
  (op-nolink threads "" "Threads are created with new-thread."
    (tests (type (new-thread (fn x)))))


  (op nil "" "nil represents false.  it is equivalent to '()"
    (tests "(is nil '())" (type nil)))
  (op t "" "t represents true.  Any non-nil value will evaluate as true in a
  conditional, including 0 and the empty string." (tests (no t) (type t))) )

(newtable "Type handling" 
(text "Arc has functions to convert types and to determine the type of an
object.")
  (op coerce "obj type [args]" "Coerces object to a new type.  A char can be
  coerced to int, string, or sym.  A number can be coerced to int, char, or string
  (of specified base).  A string can be coerced to sym, cons (char list), or int (of
  specified base).  A list of characters can be coerced to a string.  A symbol
  can be coerced to a string." 
    (tests (coerce "a" 'sym)
           "(coerce 65 'char)"
	   "(coerce 65 'int 2)"
	   (coerce "abc" 'cons)) )
  (op type "object" "Returns the type of an object (as a symbol).
  Possibilities are cons, sym, fn, char, string, int, num, table, output,
  input, socket, exception, or mac." 
    (tests (type 1) (type car)))) 

(newtable "Special forms" 
  (text "Arc defines a small number of special forms, which are evaluated
  specially.")
  (op fn "args [body ...]"
   "fn is used to create lambda functions.  The args can be a variable (which
   will pick up all the arguments as a list), a list of variables, or a dotted list of
   variables (the last will pick up the remainder as a list )." 
    (tests ((fn (x y) (+ x y)) 1 2)
           ((fn all (len all)) 1 2 3) 
	   ((fn (arg1 arg2 . rest) rest) 1 2 3 4)
	   ))
  (op if "[test expr] ... [else-expr]" "Arc is the basic conditional operation.
  It takes a sequence of tests and expressions.  The expression corresponding
  to the first true test is returned.  Other expressions are not evaluated."
    (tests "(if nil \"Nil is true\"
    0   \"0 is true\"
    \"What is true?\")")) 
  (op quasiquote "arg" " The backquote ` is shorthand for quasiquote, e.g. `(+
  1 2) is the same as (quasiquote (1 2)).  Inside quasiquote, the unquote
  operator will cause the contents to be evaluated instead of quoated.  The
  unquote-splicing operator will cause contents to be evaluated and spliced
  into the result.  , is shorthand for unquote, and ,@ is shorthand for
  unquote-splicing." 
    (tests `((+ 1 2) ,(+ 3 4) ,@(list 5 6)))) 
  (op quote "arg" " The single quote ' is shorthand for quote, e.g. 'x is the same as (quote x) " 
    (tests '(1 2 3))) 
  (op destructive assign "variable val" "assign is used to assign a value to a variable."
    (tests (assign x 10)))) 

(newtable "Invoking a type"
  (text "Arc permits lists, tables, and strings to be used as functions.")
  (op-nolink procedure "[arg ...]" "Invokes the procedure or macro."
    (tests (sqrt 2)))
  (op-nolink list "n" "Returns the nth element of the list."
    (tests ('(a b c) 1)))
  (op-nolink table "value [default]" "Looks up the value in the table.  Returns nil (or default) if the
  element is not present in the table."
    (tests "(let tbl (table)
  (= (tbl 3) 9)
  (= (tbl 4) 16)
  (tbl 3))"))
  (op-nolink string "n" "Returns the nth character of the string."
    (tests ("abc" 1)))
  )

(newtable "  Predicates " 
  (text "Arc includes multiple predicates.  The dead and ssyntax predicates are
  listed elsewhere.")
  (op predicate < "arg arg [...]" "Less than comparison.  Applies to numbers, strings, symbols, or
  chars.  If multiple arguments are given, the sequence must be monotonically
  increasing."
    (tests (< 1 2)
           (< 1 2 3)
	   (< 1 3 2)
           (< "a" "b")
           (< 'a 'b)
	   (< #\a #\b)
    )) 
  (op predicate > "arg arg [...]" "Greater than comparison.  Applies to numbers, strings, symbols, or
  chars.  If multiple arguments are given, the sequence must be monotonically
  decreasing." 
    (tests (> 1 2)
	   (> 3 1 2)
           (> "a" "b")
           "(> 'a 'b)"
	   (> #\a #\b)
    )) 
  (op predicate bound "symbol" "Tests is a symbol is bound."
    (tests (bound 'foobar)
      "(do
       (assign y 1)
       (bound 'y))")) 
  (op predicate exact "value" "Tests if the value is an exact integer."
    (tests (exact 3) (exact 3.14))) 
  (op predicate is "val [val ...] " "Tests equality with eqv?" 
    (tests (is 1 2) 
           (is "a" "a")
	   "(is '(1) '(1))"
           (is 1 1 1 1)
	   "(is nil '())"
	   ))
    ) 

(newtable "  List operations " 
  (text "The traditional list operations are supported.  Some of the operations
  also apply to strings.")
  (op car "list" "First element of list" 
    (tests "(car '(1 2 3))")) 
  (op cdr "list" "Remainder of list." 
    (tests "(cdr '(1 2 3))")) 
  (op cons "element list" "Prepends element to list." 
    (tests "(cons 1 '(2 3))")
           "(cons 'a 'b)")
  (op newstring "length [char]" "Creates a string of the given length."
    (tests (newstring 5 #\a)))
  (op destructive scar "list value" "Sets car of list to new value.  If applied to a
  string, assigns to the first character of the string, which must have length at
  least one."
    (tests "(do
    (= x \"abc\")
    (scar x #\\d)
    x)"
       "(do
    (= x '(1 2 3))
    (scar x #\\d)
    x)")) 
  (op destructive scdr "list value" "Sets cdr of a list." 
    (tests "(do
    (= x '(1 2 3))
    (scdr x '(4))
    x)")) 
  (op destructive sref "object value index" "Sets indexed entry in a list, string, or hash table to
  the given value." 
    (tests "(do
    (= x \"abc\")
    (sref x #\\d 1) x)"
       "(do
    (= x '(1 2 3))
    (sref x #\\d 1) x)")) 
  (op len "obj" "Computes the length of a list, string, or hash table." 
    (tests (len "abc") (len '(1 2 3))))) 

(newtable " Math operations " 
  (text "The math operations of Arc are fairly limited.  Many expected
  operations, such as trigonometry, are missing.")
  (op * "args" "Multiplication." 
    (tests (* 2 3))) 
  (op + "args" "Addition.  This operator also performs string and list
  concatenation." 
    (tests (+ 1 2 3)
    (+ "ab" "c" "de")
    "(+ '(1 2) '(3 4) '(5))") )
  (op - "args" "Subtraction." 
    (tests (- 3 2))) 
  (op / "args" "Division" 
    (tests (/ 1 2) (/ 1. 2))) 
  (op cos "arg" "Cosine function.  New in arc3." (tests (cos 3.14)))
  (op expt "base exponent" "Exponentiation." 
    (tests (expt 2 3))) 
  (op log "arg" "Natuarl logarithm function.  New in arc3." (tests (log 100)))
  (op mod "dividend divisor" "  " 
    (tests (mod 10 3) (mod -10 3))) 
  (op rand "[max] " "Returns a random number between 0 and 1, or between 0 and
  the specified integer (excluding the integer)." 
    (tests (rand 10) (rand))) 
  (op sin "arg" "Sine function.  New in arc3." (tests (sin 3.14)))
  (op sqrt "number" "Square root operation" 
    (tests (sqrt 2)(sqrt -1)))
  (op tan "arg" "Tangent function.  New in arc3." (tests (tan 3.14)))
  (op trunc "number" "Truncates to an integer.  Was 'truncate' in arc0." 
    (tests (trunc 1.9) (trunc -1.1)))) 


(newtable " Table operations " 
  (text "Arc provides support for hash tables.")
  (op maptable "proc table " "Applies proc to each element of the table."
    (tests "(let x (table)
    (sref x 9 3)
    (sref x 16 4)
    (maptable (fn (key val) (prn key \" \" val)) x))"))
  (op table "" "Creates a hash table." (tests (table))) )


(newtable "Evaluation" 
  (text "Arc introduces several special syntax forms of expression, using the
  symbolx : ! . or ~.")
  (op eval "expression" "Evaluates the expression." 
    (tests "(eval '(+ 1 2))")) 
  (op apply "fn arglist" "Applies the function to the arguments." 
    (tests "(apply + '(1 2))")) 
  (op ssexpand "symbol" "Expands special syntax (: ! . or ~).  The :
  character indicates composition.  The ~ indicates complementing.  The .
  applies the first value to the remainder.  The ! is like . except the
  arguments are quoted." 
    (tests "(ssexpand 'x:~y:z)" "(ssexpand '+.1.2)" "(ssexpand '+!1!2)"
    "(ssexpand 'cons!a!b)"))
  (op predicate ssyntax "symbol" "Tests if the symbol contains special syntax (: ! . or ~)." 
    (tests (ssyntax 'x:y)))
    )

(newtable "Macros" 
  (text "Arc's macro system is more similar to Lisp than to Scheme.  Note that
  the 'mac' function is not part of the core, but is implemented on top of the
  core functions described below.")
  (op annotate "type obj" "Tags the object with the given type.  Only used for
  macros."
  (tests (type (annotate 'mac car)))
  ) 
  (op macex "macro" "Expands a macro."
   (tests (macex '(let a 1 (pr a))))) 
  (op macex1 " macro" "Expands a macro to one level."
   (tests (macex1 '(let a 1 (pr a))))) 
  (op rep "obj" "Returns the underlying object for an annotated object"
    (tests (rep whilet)))
  (op sig " " "Hash table containing function signatures."
    (tests "(sig 'map)") )
  (op uniq " " "Generates a unique symbol."
   (tests (uniq))))

(newtable "I/O" 
  (text "Arc has a large variety of I/O operations.  They can be used for file I/O,
  string I/O, or network I/O.")
  (op call-w/stdin "input-port thunk" "Calls thunk, setting current-input-port
  to the specified port."
    (tests (call-w/stdin (instring "Hello") readline))) 
  (op call-w/stdout "output-port thunk" "Calls thunk, setting current-input-port
  to the specified port."
    (tests
     "(let sop (outstring)
  (call-w/stdout sop (fn () (prn '(1 2))))
  (inside sop))"
  ))
  (op close "port [...]" "Closes an input-port, output-port or tcp-listener.  Will wait for a TCP output port to drain." (tests (close (outfile "/tmp/junk")))) 
  (op force-close "port [...]" "Closes an input-port, output-port or tcp-listener.  Will discard any buffered output.  New in arc3." (tests (close (outfile "/tmp/junk")))) 
  (op disp "[arg [output-port]]" "Displays the argument on the output-port (or
  current-output-port) using Scheme's display procedure."
    (tests (disp '(1 2))
    (disp "abc")))
  (op peekc "input-port" "Peeks at the next character from the input port, but
  leaves the character for future reads.  It
  uses current-input-port if the argument is nil.  It returns the character, or nil for
  end-of-file."
    (tests (peekc (pipe-from "echo hello")))) 
  (op flushout "" "Flushes output.  New in arc3."
    (tests (flushout)))
  (op pipe-from "command" "Executes command in the underlying OS.  Then opens
  an input-port to the results."
    (tests (readline (pipe-from "echo hello")))) 
  (op readb "[input-port]" "Reads a byte from the input-port (or default of
  current-input-port).  Returns nil on end-of-file."
    (tests (readb (pipe-from "echo hello")))) 
  (op readc "[input-port]" "Reads a character from the input-port (or default of
  current-input-port).  Returns nil on end-of-file."
    (tests (readc (pipe-from "echo ©"))))
  (op sread "input-port eof-value" "Reads a Scheme object from the input port.  Returns eof-value
  on end-of-file."
    (tests (sread (pipe-from "echo '(1 2) (3)'") "junk")))
  (op stderr "" "current-error-port: returns the output-port stderr" (tests (stderr))) 
  (op stdin "" "current-input-port: returns the input-port stdin" (tests (stdin))) 
  (op stdout "" "current-output-port: returns the output-port stdout" (tests (stdout))) 
  (op write "[arg [output-port]]" "Writes the argument to the output-port (or
  current-output-port).  The write and disp procedures are subtly different.
  The output from write is more 'raw' than the output from disp; see the
  MzScheme
  <a
  href='http://download.plt-scheme.org/doc/372/html/mzscheme/mzscheme.html#node_toc_node_sec_11.2.5'>Default
  Printer</a> documentation for details."
   (tests (write "abc")))
  (op writeb "int [output-port]" "Writes the byte to the output-port (or
  default of current-output-port)."
    (tests (writeb 65))) 
  (op writec "char [output-port]" "Writes the character to the output-port (or
  default of current-output-port)."
    (tests (writec #\日))) 
  ) 

(newtable "String Port I/O"
(text "
See <a
href='http://download.plt-scheme.org/doc/372/html/mzscheme/mzscheme-Z-H-11.html#node_sec_11.1.5'>String
Ports</a> for background on String Port I/O.  ")

  (op inside "string-output-port" "Returns (as a string) the bytes accumulated
  in a string-output-port generated by outstring.  This is MzScheme's get-output-string."
    (tests (let sop (outstring) (write "hello" sop) (inside sop)))) 
  (op instring "string [name]" "Creates an input port to read UTF-8 bytes from the
  string.  This is MzScheme's open-input-string."
    (tests (readline (instring "hello"))))
  (op outstring "[name]" "Creates an output-port that accumulates the output
  into a byte string.  The string can be retrieved with inside.  This is
  MzScheme's open-output-string."
    (tests (outstring))
  ) 
)

(newtable "Networking" 
  (text "Arc's networking functions are limited to those necessary to support a
  web server.  In particular, there is no support for outgoing network
  connections.")
  (op client-ip "tcp-output-port " "Returns the IP address of the client
  connected to a TCP port.  The tcp-output-argument is the second value
  returned from socket-accept.  The address is returned as a string, the same as
  the third result from socket-accept."
   (faketest
    "(let s (socket-accept (open-socket 8080))
    (client-ip (s 1)))" "\"10.2.40.71\"")
   ) 
  (op open-socket "port" "Opens a tcp-listener on the given port."
    (tests (open-socket 8000))) 
  (op socket-accept "tcp-port" "Accepts a connection on the given tcp-listener.
  The thread blocks until a connection is received.  It returns a list of
  (input-port output-port client-ip-string)"
    (faketest "(socket-accept (open-socket 8080))"
"(#<input-port> #<output-port> \"10.2.40.71\")" )
))

(newtable "File system operations" 
(text "The I/O operations are closely related to MzScheme's <a
href='http://download.plt-scheme.org/doc/mzscheme/mzscheme-Z-H-11.html#node_chap_11'>I/O
operations</a>.")
  (op dir "path" "Returns the directory contents as a list."
    (tests (dir "mydir")))
  (op dir-exists "path" "Tests if a directory exists."
    (tests (dir-exists "mydir"))) 
  (op file-exists "path" "Tests if a file exists."
    (tests (file-exists "mydir")))
  (op infile "filename ['binary | 'text]" "Opens the specified path for
  reading.  By default, the file is opened in binary mode, and bytes are
  returned as read from the file.  In text mode, return and linefeed bytes are 
  filtered in a platform-specific way.  (On Windows, return followed by
  linefeed is filtered to a single linefeed.)"
    (tests (outfile "/tmp/junk" 'append)) )
  (op outfile "filename ['append]" "Opens the specified path for writing.  By
  default, the file is truncated if it already exists.  Returns an
  output-port.  Arc supports only 'text mode for outfile."
    (tests (outfile "/tmp/junk" 'append)) )
  (op mvfile "path" "Moves the specified file. New in arc3."
    (tests (mvfile "/tmp/junk" "/tmp/newjunk")))
  (op rmfile "path" "Removes the specified file."
    (tests (rmfile "/tmp/newjunk")))
  ) 

(newtable "Threading" 
  (text "See <a
  href='http://download.plt-scheme.org/doc/372/html/mzscheme/mzscheme-Z-H-7.html#node_chap_7'>MzScheme's
  Threads</a> for details of the threading model.")
  (op atomic-invoke "function" "Invokes function, making sure that only one
  thread at a time invokes something wrapped inside an atomic-invoke."
    (tests (atomic-invoke (fn () "critical section" (+ 1 2)))))
  (op break-thread "thread" "Triggers a break exception on a thread."
  (faketest
"(let th (new-thread (fn () (sleep 2)))
  (break-thread th))" "user break"))
  (op predicate dead "thread" "Predicate to test if a thread has terminated."
  (tests 
"(let th (new-thread (fn () (sleep 1)))
  (prn (dead th)) (sleep 2) (prn (dead th)))"))
  (op kill-thread "thread" "Terminates the specified thread immediately."
    (tests "(let th (new-thread (fn () (sleep 100)))
    (kill-thread th)
    (dead th))")) 
  (op new-thread "procedure" "Creates and returns a new thread.  Was 'thread'
  in arc0."
    (tests (new-thread (fn () (+ 1 2)))))
  (op sleep "secs" "Causes the current thread to sleep for at least the
  specified time." (tests (sleep .1)))
  )

(newtable "Error handling and continuations" 
  (text "The control flow operations of Arc are somewhat complex.
  See the MzScheme manual on <a
  href='http://download.plt-scheme.org/doc/mzscheme/mzscheme-Z-H-6.html#node_chap_6'>exceptions
  and control flow</a> for details.")
  (op details "exception" "Returns the message associated with an exception."
  (tests (on-err (fn (ex) (details ex)) (err "boo")))
  ) 
  (op err "string ..." "Raises an exception with the given text."
  (tests (err "Failure" 42))
  ) 
  (op on-err "err-proc proc" "Executes proc.  Calls err-proc if an exception
  occurs in proc.  The exception is passed to err-proc"
  (tests "(on-err (fn (ex) (string \"caught \" (details ex)))
          (fn () (/ 1 0)))")
  ) 
  (op ccc "procedure" "Packages up the current continuation into an 'escape
  procedure' and passes it to the procedure.  Equivalent to Scheme's call/cc or <a
  href='http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_idx_566'>call-with-current-continuation</a>."
    (tests (ccc (fn (ep) (ep "bailout value") 42)))
  ) 
  (op protect "during-procedure after-procedure" "Uses Scheme's
  <a
  href='http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_idx_576'>dynamic-wind</a> to
  ensure that after-procedure is executed whenever during-procedure exits."
  (tests "(protect (fn () (/ 1 0))
    (fn () (prn \"after\")))")
  ) 
  )

(newtable "Time" 
  (text "Arc includes several functions related to time.")
  (op current-gc-milliseconds " " "Returns the amount of time spent in garbage
  collection.
  See <a
  href='http://download.plt-scheme.org/doc/372/html/mzscheme/mzscheme-Z-H-15.html#node_sec_15.1'>MzScheme</a>
  for more details on Arc's time functions."
   (tests (current-gc-milliseconds))) 
  (op current-process-milliseconds "" "Returns the number of milliseconds of
  processor time used."
   (tests (current-process-milliseconds))) 
  (op msec "" "Returns current time in milliseconds.  The time is from an
  arbitrary starting date, and can wrap or be negative."
  (tests (msec)))
  (op seconds " " "Returns current time in seconds, from a platform-specific
  starting date." (tests (seconds))) 
  (op timedate [secs]" " "Converts time to string; default is current time.  New in arc3."
    (tests (timedate) (timedate 0)))
  )

(newtable "Other OS Operations" 
  (text "The following are miscellaneous operating system operations.")
  (op declare "key value" "Sets an interpreter option.  The key <code>direct-calls</code>, when set to t, optimizes function calls on the assumption they will not be redefined as table.  The key <code>explicit-flush</code>, when set to t, disables automatic flushing of output, requiring explicit flushout calls.  Both are initializes to nil.  New in arc3."
    (tests (declare direct-calls t) (declare explicit-flush t)))
  (op memory "" "Returns the current memory usage.  New in arc3."
    (tests (memory)))
  (op system "string" "Executes the string in the underlying OS."
    (tests (system "date #/t")))
  (op quit "" "Exits the interpreter." (faketest "(quit)" "--exits--"))
  )
(import "docs/legend.html")
)
