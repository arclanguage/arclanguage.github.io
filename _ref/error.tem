(page "Error handling and continuations"
(newtable "Error handling and continuations"
  (import "docs/error0.html")
(mac point "name [body ...]" "Creates a 'throw' function called
<code>name</code> and executes <code>body</code>.  If <code>name</code> is
executed within <code>body</code>, that value will be returned from
<code>point</code>.  Otherwise, <code>point</code> has no effect and the value from <code>body</code> will be
returned." (tests (+ 10 (point throw (+ 20 (throw 3) 30))) ))
(mac catch "body" "Executes <code>body</code> and catches any value passed to <code>throw</code>.  This is the same as <code>point</code> with the throw function's name predefined." (tests (+ 10 (catch (+ 20 (throw 3) 30)))))
  (op ccc "procedure" "Packages up the current continuation into an 'escape
  procedure' and passes it to the procedure.  Equivalent to Scheme's <code>call/cc</code> or <a
  href='http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_idx_566'>call-with-current-continuation</a>."
    (tests (ccc (fn (ep) (ep "bailout value") 42)))
  ) 
  (op protect "during-procedure after-procedure" "Uses Scheme's
  <a
  href='http://www.schemers.org/Documents/Standards/R5RS/HTML/r5rs-Z-H-9.html#%_idx_576'>dynamic-wind</a> to
  ensure that <code>after-procedure</code> is executed whenever <code>during-procedure</code> exits."
  (tests "(protect (fn () (/ 1 0))
    (fn () (prn \"after\")))")
  ) 
  (mac after "during-body [after-body ...]" "Ensures that
<code>after-body</code> executes whenever <code>during-body</code> exits." (tests))
  (op details "exception" "Returns the message associated with an exception."
  (tests (on-err (fn (ex) (details ex)) (err "boo")))
  ) 
  (op err "string ..." "Raises an exception with the given text."
  (tests (err "Failure" 42))
  ) 
  (op on-err "err-proc proc" "Executes proc.  Calls err-proc if an exception
  occurs in proc.  The exception is passed to err-proc"
  (tests "(on-err (fn (ex) (string \"caught \" (details ex)))
          (fn () (/ 1 0)))")
  ) 
(mac errsafe "expr" "Executes expr, returning nil if an error occurs." (tests (errsafe (/ 1 2)) (errsafe (/ 1 0))))
  )
)
