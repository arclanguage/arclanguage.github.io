(page "Evaluation"
(newtable "Evaluation"
(import "docs/evaluation0.html")
  (op eval "expression" "Evaluates the expression." 
    (tests "(eval '(+ 1 2))")) 
  (op apply "fn arglist" "Applies the function to the arguments." 
    (tests "(apply + '(1 2))")) 
  (op ssexpand "symbol" "Expands special syntax (: ! . or ~).  The :
  character indicates composition.  The ~ indicates complementing.  The .
  applies the first value to the remainder.  The ! is like . except the
  arguments are quoted." 
    (tests "(ssexpand 'x:~y:z)" "(ssexpand '+.1.2)" "(ssexpand '+!1!2)"
    "(ssexpand 'cons!a!b)"))
  (op predicate ssyntax "symbol" "Tests if the symbol contains special syntax (: ! . or ~)." 
    (tests (ssyntax 'x:y)))
(mac compose "[function] ..." "Composes the functions." (tests ((compose sqrt:len) "abcd")))
(mac complement "function" "Creates a procedure that is the complement of <code>function</code>." (tests( map (complement odd) '(1 2 3 4 5))))
(def idfn "x" "Identity function; returns x." (tests))
    )
)
